package ru.zov_corporation.implement.features.commands.defaults;

import net.minecraft.text.MutableText;
import net.minecraft.text.Text;
import net.minecraft.util.Formatting;
import ru.zov_corporation.core.Main;
import ru.zov_corporation.api.feature.command.Command;
import ru.zov_corporation.api.feature.command.argument.IArgConsumer;
import ru.zov_corporation.api.feature.command.exception.CommandException;

import java.util.Arrays;
import java.util.List;
import java.util.Random;
import java.util.stream.Stream;

public class KeyCommand extends Command {
    Main main;
    private final Random random = new Random();
    
    // –ú–∞—Å—Å–∏–≤ —Ä–∞–Ω–¥–æ–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    private final String[] messages = {
        "–ù—É, –≤—Å–µ –ø–æ–ª—É—á–∏–ª–∏? üëÜ",
        "–ë—Ä–∞—Ç, –∑–∞–±–µ—Ä–∏ –∫–ª—é—áüëÜ",
        "–ê—É—É—É –±—Ä–∞—Ç, –ª—É—Ç–∞–π –∫–ª—é—á üëÜ",
        "–ë–†–ê–¢ –ó–ê–ô–î–ò –í –°–ï–¢–¨üëÜ",
        "–ö–ª—é—á –≥–æ—Ç–æ–≤, –±—Ä–∞—Ç–∞–Ω! üëÜ",
        "–ó–∞–±–∏—Ä–∞–π –∫–ª—é—á, –Ω–µ —Ç–µ—Ä—è–π! üëÜ",
        "–ë—Ä–∞—Ç, –∫–ª—é—á –∂–¥–µ—Ç —Ç–µ–±—è! üëÜ",
        "–í—Ä–µ–º—è –∫–ª—é—á–∞ –ø—Ä–∏—à–ª–æ! üëÜ",
        "–ö–ª—é—á –≤ —Å–µ—Ç–∏, –∑–∞—Ö–æ–¥–∏! üëÜ",
        "–ë—Ä–∞—Ç–∞–Ω, –∫–ª—é—á –≥–æ—Ç–æ–≤! üëÜ"
    };

    protected KeyCommand(Main main) {
        super("key");
        this.main = main;
    }

    @Override
    public void execute(String label, IArgConsumer args) throws CommandException {
        args.requireMax(0); // –ö–æ–º–∞–Ω–¥–∞ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç—ã
        
        // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        String randomMessage = messages[random.nextInt(messages.length)];
        
        // –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º [ZOV] –∏ —Å–ª—É—á–∞–π–Ω—ã–º —Ü–≤–µ—Ç–æ–º
        MutableText message = Text.literal(randomMessage);
        Formatting[] colors = {Formatting.AQUA, Formatting.BLUE, Formatting.GREEN, 
                              Formatting.LIGHT_PURPLE, Formatting.YELLOW, Formatting.GOLD};
        Formatting randomColor = colors[random.nextInt(colors.length)];
        message.setStyle(message.getStyle().withColor(randomColor));
        
        logDirect(message);
    }

    @Override
    public Stream<String> tabComplete(String label, IArgConsumer args) throws CommandException {
        return Stream.empty(); // –ö–æ–º–∞–Ω–¥–∞ –Ω–µ –∏–º–µ–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    }

    @Override
    public String getShortDesc() {
        return "–ü–æ–ª—É—á–∏—Ç—å —Ä–∞–Ω–¥–æ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∫–ª—é—á–µ";
    }

    @Override
    public List<String> getLongDesc() {
        return Arrays.asList(
                "–ö–æ–º–∞–Ω–¥–∞ –≤—ã–≤–æ–¥–∏—Ç —Å–ª—É—á–∞–π–Ω–æ–µ –º–æ—Ç–∏–≤–∏—Ä—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∫–ª—é—á–µ",
                "",
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:",
                "> key - –í—ã–≤–æ–¥–∏—Ç —Å–ª—É—á–∞–π–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º [ZOV]"
        );
    }
}
